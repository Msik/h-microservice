// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/api.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on StatisticV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StatisticV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatisticV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StatisticV1RequestMultiError, or nil if none found.
func (m *StatisticV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *StatisticV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Period

	if len(errors) > 0 {
		return StatisticV1RequestMultiError(errors)
	}

	return nil
}

// StatisticV1RequestMultiError is an error wrapping multiple validation errors
// returned by StatisticV1Request.ValidateAll() if the designated constraints
// aren't met.
type StatisticV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatisticV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatisticV1RequestMultiError) AllErrors() []error { return m }

// StatisticV1RequestValidationError is the validation error returned by
// StatisticV1Request.Validate if the designated constraints aren't met.
type StatisticV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatisticV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatisticV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatisticV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatisticV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatisticV1RequestValidationError) ErrorName() string {
	return "StatisticV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e StatisticV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatisticV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatisticV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatisticV1RequestValidationError{}

// Validate checks the field values on StatisticV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StatisticV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatisticV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StatisticV1ResponseMultiError, or nil if none found.
func (m *StatisticV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *StatisticV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Wastes

	if len(errors) > 0 {
		return StatisticV1ResponseMultiError(errors)
	}

	return nil
}

// StatisticV1ResponseMultiError is an error wrapping multiple validation
// errors returned by StatisticV1Response.ValidateAll() if the designated
// constraints aren't met.
type StatisticV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatisticV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatisticV1ResponseMultiError) AllErrors() []error { return m }

// StatisticV1ResponseValidationError is the validation error returned by
// StatisticV1Response.Validate if the designated constraints aren't met.
type StatisticV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatisticV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatisticV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatisticV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatisticV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatisticV1ResponseValidationError) ErrorName() string {
	return "StatisticV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StatisticV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatisticV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatisticV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatisticV1ResponseValidationError{}

// Validate checks the field values on AddCategoryV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddCategoryV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCategoryV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddCategoryV1RequestMultiError, or nil if none found.
func (m *AddCategoryV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCategoryV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	if len(errors) > 0 {
		return AddCategoryV1RequestMultiError(errors)
	}

	return nil
}

// AddCategoryV1RequestMultiError is an error wrapping multiple validation
// errors returned by AddCategoryV1Request.ValidateAll() if the designated
// constraints aren't met.
type AddCategoryV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCategoryV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCategoryV1RequestMultiError) AllErrors() []error { return m }

// AddCategoryV1RequestValidationError is the validation error returned by
// AddCategoryV1Request.Validate if the designated constraints aren't met.
type AddCategoryV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCategoryV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCategoryV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCategoryV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCategoryV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCategoryV1RequestValidationError) ErrorName() string {
	return "AddCategoryV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddCategoryV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCategoryV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCategoryV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCategoryV1RequestValidationError{}

// Validate checks the field values on AddCategoryV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddCategoryV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCategoryV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddCategoryV1ResponseMultiError, or nil if none found.
func (m *AddCategoryV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCategoryV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddCategoryV1ResponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddCategoryV1ResponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddCategoryV1ResponseValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddCategoryV1ResponseMultiError(errors)
	}

	return nil
}

// AddCategoryV1ResponseMultiError is an error wrapping multiple validation
// errors returned by AddCategoryV1Response.ValidateAll() if the designated
// constraints aren't met.
type AddCategoryV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCategoryV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCategoryV1ResponseMultiError) AllErrors() []error { return m }

// AddCategoryV1ResponseValidationError is the validation error returned by
// AddCategoryV1Response.Validate if the designated constraints aren't met.
type AddCategoryV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCategoryV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCategoryV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCategoryV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCategoryV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCategoryV1ResponseValidationError) ErrorName() string {
	return "AddCategoryV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddCategoryV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCategoryV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCategoryV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCategoryV1ResponseValidationError{}

// Validate checks the field values on Category with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Category) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Category with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CategoryMultiError, or nil
// if none found.
func (m *Category) ValidateAll() error {
	return m.validate(true)
}

func (m *Category) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	if len(errors) > 0 {
		return CategoryMultiError(errors)
	}

	return nil
}

// CategoryMultiError is an error wrapping multiple validation errors returned
// by Category.ValidateAll() if the designated constraints aren't met.
type CategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryMultiError) AllErrors() []error { return m }

// CategoryValidationError is the validation error returned by
// Category.Validate if the designated constraints aren't met.
type CategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryValidationError) ErrorName() string { return "CategoryValidationError" }

// Error satisfies the builtin error interface
func (e CategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryValidationError{}

// Validate checks the field values on CategoryListV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryListV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryListV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryListV1RequestMultiError, or nil if none found.
func (m *CategoryListV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryListV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CategoryListV1RequestMultiError(errors)
	}

	return nil
}

// CategoryListV1RequestMultiError is an error wrapping multiple validation
// errors returned by CategoryListV1Request.ValidateAll() if the designated
// constraints aren't met.
type CategoryListV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryListV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryListV1RequestMultiError) AllErrors() []error { return m }

// CategoryListV1RequestValidationError is the validation error returned by
// CategoryListV1Request.Validate if the designated constraints aren't met.
type CategoryListV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryListV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryListV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryListV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryListV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryListV1RequestValidationError) ErrorName() string {
	return "CategoryListV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryListV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryListV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryListV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryListV1RequestValidationError{}

// Validate checks the field values on CategoryListV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryListV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryListV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryListV1ResponseMultiError, or nil if none found.
func (m *CategoryListV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryListV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCategories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CategoryListV1ResponseValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CategoryListV1ResponseValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CategoryListV1ResponseValidationError{
					field:  fmt.Sprintf("Categories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CategoryListV1ResponseMultiError(errors)
	}

	return nil
}

// CategoryListV1ResponseMultiError is an error wrapping multiple validation
// errors returned by CategoryListV1Response.ValidateAll() if the designated
// constraints aren't met.
type CategoryListV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryListV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryListV1ResponseMultiError) AllErrors() []error { return m }

// CategoryListV1ResponseValidationError is the validation error returned by
// CategoryListV1Response.Validate if the designated constraints aren't met.
type CategoryListV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryListV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryListV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryListV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryListV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryListV1ResponseValidationError) ErrorName() string {
	return "CategoryListV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryListV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryListV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryListV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryListV1ResponseValidationError{}

// Validate checks the field values on DeleteCategoryV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCategoryV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCategoryV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCategoryV1RequestMultiError, or nil if none found.
func (m *DeleteCategoryV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCategoryV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCategoryV1RequestMultiError(errors)
	}

	return nil
}

// DeleteCategoryV1RequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCategoryV1Request.ValidateAll() if the designated
// constraints aren't met.
type DeleteCategoryV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCategoryV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCategoryV1RequestMultiError) AllErrors() []error { return m }

// DeleteCategoryV1RequestValidationError is the validation error returned by
// DeleteCategoryV1Request.Validate if the designated constraints aren't met.
type DeleteCategoryV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCategoryV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCategoryV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCategoryV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCategoryV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCategoryV1RequestValidationError) ErrorName() string {
	return "DeleteCategoryV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCategoryV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCategoryV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCategoryV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCategoryV1RequestValidationError{}

// Validate checks the field values on DeleteCategoryV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCategoryV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCategoryV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCategoryV1ResponseMultiError, or nil if none found.
func (m *DeleteCategoryV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCategoryV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteCategoryV1ResponseMultiError(errors)
	}

	return nil
}

// DeleteCategoryV1ResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteCategoryV1Response.ValidateAll() if the designated
// constraints aren't met.
type DeleteCategoryV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCategoryV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCategoryV1ResponseMultiError) AllErrors() []error { return m }

// DeleteCategoryV1ResponseValidationError is the validation error returned by
// DeleteCategoryV1Response.Validate if the designated constraints aren't met.
type DeleteCategoryV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCategoryV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCategoryV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCategoryV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCategoryV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCategoryV1ResponseValidationError) ErrorName() string {
	return "DeleteCategoryV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCategoryV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCategoryV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCategoryV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCategoryV1ResponseValidationError{}

// Validate checks the field values on Waste with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Waste) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Waste with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in WasteMultiError, or nil if none found.
func (m *Waste) ValidateAll() error {
	return m.validate(true)
}

func (m *Waste) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Amount

	// no validation rules for CategoryId

	if len(errors) > 0 {
		return WasteMultiError(errors)
	}

	return nil
}

// WasteMultiError is an error wrapping multiple validation errors returned by
// Waste.ValidateAll() if the designated constraints aren't met.
type WasteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WasteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WasteMultiError) AllErrors() []error { return m }

// WasteValidationError is the validation error returned by Waste.Validate if
// the designated constraints aren't met.
type WasteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WasteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WasteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WasteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WasteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WasteValidationError) ErrorName() string { return "WasteValidationError" }

// Error satisfies the builtin error interface
func (e WasteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWaste.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WasteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WasteValidationError{}

// Validate checks the field values on WasteListV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WasteListV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WasteListV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WasteListV1RequestMultiError, or nil if none found.
func (m *WasteListV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *WasteListV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errors) > 0 {
		return WasteListV1RequestMultiError(errors)
	}

	return nil
}

// WasteListV1RequestMultiError is an error wrapping multiple validation errors
// returned by WasteListV1Request.ValidateAll() if the designated constraints
// aren't met.
type WasteListV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WasteListV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WasteListV1RequestMultiError) AllErrors() []error { return m }

// WasteListV1RequestValidationError is the validation error returned by
// WasteListV1Request.Validate if the designated constraints aren't met.
type WasteListV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WasteListV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WasteListV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WasteListV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WasteListV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WasteListV1RequestValidationError) ErrorName() string {
	return "WasteListV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e WasteListV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWasteListV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WasteListV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WasteListV1RequestValidationError{}

// Validate checks the field values on WasteListV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WasteListV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WasteListV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WasteListV1ResponseMultiError, or nil if none found.
func (m *WasteListV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *WasteListV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWastes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WasteListV1ResponseValidationError{
						field:  fmt.Sprintf("Wastes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WasteListV1ResponseValidationError{
						field:  fmt.Sprintf("Wastes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WasteListV1ResponseValidationError{
					field:  fmt.Sprintf("Wastes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WasteListV1ResponseMultiError(errors)
	}

	return nil
}

// WasteListV1ResponseMultiError is an error wrapping multiple validation
// errors returned by WasteListV1Response.ValidateAll() if the designated
// constraints aren't met.
type WasteListV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WasteListV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WasteListV1ResponseMultiError) AllErrors() []error { return m }

// WasteListV1ResponseValidationError is the validation error returned by
// WasteListV1Response.Validate if the designated constraints aren't met.
type WasteListV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WasteListV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WasteListV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WasteListV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WasteListV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WasteListV1ResponseValidationError) ErrorName() string {
	return "WasteListV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WasteListV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWasteListV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WasteListV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WasteListV1ResponseValidationError{}

// Validate checks the field values on AddWasteListV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddWasteListV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddWasteListV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddWasteListV1RequestMultiError, or nil if none found.
func (m *AddWasteListV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AddWasteListV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Amount

	if m.CategoryId != nil {
		// no validation rules for CategoryId
	}

	if len(errors) > 0 {
		return AddWasteListV1RequestMultiError(errors)
	}

	return nil
}

// AddWasteListV1RequestMultiError is an error wrapping multiple validation
// errors returned by AddWasteListV1Request.ValidateAll() if the designated
// constraints aren't met.
type AddWasteListV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddWasteListV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddWasteListV1RequestMultiError) AllErrors() []error { return m }

// AddWasteListV1RequestValidationError is the validation error returned by
// AddWasteListV1Request.Validate if the designated constraints aren't met.
type AddWasteListV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddWasteListV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddWasteListV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddWasteListV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddWasteListV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddWasteListV1RequestValidationError) ErrorName() string {
	return "AddWasteListV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddWasteListV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddWasteListV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddWasteListV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddWasteListV1RequestValidationError{}

// Validate checks the field values on AddWasteListV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddWasteListV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddWasteListV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddWasteListV1ResponseMultiError, or nil if none found.
func (m *AddWasteListV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *AddWasteListV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWaste()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddWasteListV1ResponseValidationError{
					field:  "Waste",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddWasteListV1ResponseValidationError{
					field:  "Waste",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWaste()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddWasteListV1ResponseValidationError{
				field:  "Waste",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddWasteListV1ResponseMultiError(errors)
	}

	return nil
}

// AddWasteListV1ResponseMultiError is an error wrapping multiple validation
// errors returned by AddWasteListV1Response.ValidateAll() if the designated
// constraints aren't met.
type AddWasteListV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddWasteListV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddWasteListV1ResponseMultiError) AllErrors() []error { return m }

// AddWasteListV1ResponseValidationError is the validation error returned by
// AddWasteListV1Response.Validate if the designated constraints aren't met.
type AddWasteListV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddWasteListV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddWasteListV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddWasteListV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddWasteListV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddWasteListV1ResponseValidationError) ErrorName() string {
	return "AddWasteListV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddWasteListV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddWasteListV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddWasteListV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddWasteListV1ResponseValidationError{}

// Validate checks the field values on DeleteWasteListV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWasteListV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWasteListV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWasteListV1RequestMultiError, or nil if none found.
func (m *DeleteWasteListV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWasteListV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteWasteListV1RequestMultiError(errors)
	}

	return nil
}

// DeleteWasteListV1RequestMultiError is an error wrapping multiple validation
// errors returned by DeleteWasteListV1Request.ValidateAll() if the designated
// constraints aren't met.
type DeleteWasteListV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWasteListV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWasteListV1RequestMultiError) AllErrors() []error { return m }

// DeleteWasteListV1RequestValidationError is the validation error returned by
// DeleteWasteListV1Request.Validate if the designated constraints aren't met.
type DeleteWasteListV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWasteListV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWasteListV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWasteListV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWasteListV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWasteListV1RequestValidationError) ErrorName() string {
	return "DeleteWasteListV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWasteListV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWasteListV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWasteListV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWasteListV1RequestValidationError{}

// Validate checks the field values on DeleteWasteListV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWasteListV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWasteListV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWasteListV1ResponseMultiError, or nil if none found.
func (m *DeleteWasteListV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWasteListV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteWasteListV1ResponseMultiError(errors)
	}

	return nil
}

// DeleteWasteListV1ResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteWasteListV1Response.ValidateAll() if the
// designated constraints aren't met.
type DeleteWasteListV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWasteListV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWasteListV1ResponseMultiError) AllErrors() []error { return m }

// DeleteWasteListV1ResponseValidationError is the validation error returned by
// DeleteWasteListV1Response.Validate if the designated constraints aren't met.
type DeleteWasteListV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWasteListV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWasteListV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWasteListV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWasteListV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWasteListV1ResponseValidationError) ErrorName() string {
	return "DeleteWasteListV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWasteListV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWasteListV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWasteListV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWasteListV1ResponseValidationError{}
